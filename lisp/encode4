(define (fibonacci i)
  (if (= i 0) 0
    (if (= i 1) 1
      (let ((a 0) (b 1) (c 0))
        (define fib (lambda (n)
          (if (= n 0) c
            (begin (set! c (+ a b))
                   (set! a b)
                   (set! b c)
                   (fib (- n 1))))))
                   (fib (- i 1))))))

(define l4
  (lambda (n)
(define input '())
(define output '())
(define char->number
    (lambda (n)
      (if (char=? n #\1) 1
	  (if (char=? n #\2) 2
	      (if (char=? n #\3) 3
		  (if (char=? n #\4) 4
		      (if (char=? n #\5) 5
			  (if (char=? n #\6) 6
			      (if (char=? n #\7) 7
				  (if (char=? n #\8) 8
				      (if (char=? n #\9) 9
					  0)))))))))))
(define get-a-list
    (lambda (n)
      (if (= n 0)
	  output
	  (begin (set! output (cons (car input) output))
		 (set! input (cdr input))
		 (get-a-list (- n 1))))))

(set! input (string->list (number->string (fibonacci 999))))
(get-a-list n)
(reverse (map char->number output))))

(define l 
  (lambda (word) (define n (length (string->list word)))
                        (list->string (map integer->char (map + (map char->integer (string->list word)) (l4 n))))))
